Version 4.0 HI-TECH Software Intermediate Code
"53 MCAL_Layer/GPIO/../../../../MPLAP/packs/Microchip/PIC18Fxxxx_DFP/1.3.36/xc8/pic/include/proc/pic18f4620.h
[v _PORTA `Vuc ~T0 @X0 0 e@3968 ]
"190
[v _PORTB `Vuc ~T0 @X0 0 e@3969 ]
"361
[v _PORTC `Vuc ~T0 @X0 0 e@3970 ]
"536
[v _PORTD `Vuc ~T0 @X0 0 e@3971 ]
"678
[v _PORTE `Vuc ~T0 @X0 0 e@3972 ]
"881
[v _LATA `Vuc ~T0 @X0 0 e@3977 ]
"993
[v _LATB `Vuc ~T0 @X0 0 e@3978 ]
"1105
[v _LATC `Vuc ~T0 @X0 0 e@3979 ]
"1217
[v _LATD `Vuc ~T0 @X0 0 e@3980 ]
"1329
[v _LATE `Vuc ~T0 @X0 0 e@3981 ]
"1381
[v _TRISA `Vuc ~T0 @X0 0 e@3986 ]
"1603
[v _TRISB `Vuc ~T0 @X0 0 e@3987 ]
"1825
[v _TRISC `Vuc ~T0 @X0 0 e@3988 ]
"2047
[v _TRISD `Vuc ~T0 @X0 0 e@3989 ]
"2269
[v _TRISE `Vuc ~T0 @X0 0 e@3990 ]
"52 MCAL_Layer/GPIO/HAL_GPIO.h
[; ;MCAL_Layer/GPIO/HAL_GPIO.h: 52: typedef struct{
[s S273 :3 `uc 1 :3 `uc 1 :1 `uc 1 :1 `uc 1 ]
[n S273 . port pinIndex direction logic ]
"42 MCAL_Layer/GPIO/HAL_GPIO.c
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 42:           }
[c E3387 0 1 .. ]
[n E3387 . output input  ]
"58
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 58: Std_ReturnType gpio_pin_write_logic(const pinConfig_t* pinCon ,logic_t logic){
[c E3383 0 1 .. ]
[n E3383 . low high  ]
"118
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 118: Std_ReturnType gpio_port_direction_intialize( const PortIndex_t port , uint8_t dir){
[c E3401 0 1 2 3 4 .. ]
[n E3401 . PORTA_INDEX PORTB_INDEX PORTC_INDEX PORTD_INDEX PORTE_INDEX  ]
"55 MCAL_Layer/GPIO/../../../../MPLAP/packs/Microchip/PIC18Fxxxx_DFP/1.3.36/xc8/pic/include/proc/pic18f4620.h
[; <" PORTA equ 0F80h ;# ">
"192
[; <" PORTB equ 0F81h ;# ">
"363
[; <" PORTC equ 0F82h ;# ">
"538
[; <" PORTD equ 0F83h ;# ">
"680
[; <" PORTE equ 0F84h ;# ">
"883
[; <" LATA equ 0F89h ;# ">
"995
[; <" LATB equ 0F8Ah ;# ">
"1107
[; <" LATC equ 0F8Bh ;# ">
"1219
[; <" LATD equ 0F8Ch ;# ">
"1331
[; <" LATE equ 0F8Dh ;# ">
"1383
[; <" TRISA equ 0F92h ;# ">
"1388
[; <" DDRA equ 0F92h ;# ">
"1605
[; <" TRISB equ 0F93h ;# ">
"1610
[; <" DDRB equ 0F93h ;# ">
"1827
[; <" TRISC equ 0F94h ;# ">
"1832
[; <" DDRC equ 0F94h ;# ">
"2049
[; <" TRISD equ 0F95h ;# ">
"2054
[; <" DDRD equ 0F95h ;# ">
"2271
[; <" TRISE equ 0F96h ;# ">
"2276
[; <" DDRE equ 0F96h ;# ">
"2435
[; <" OSCTUNE equ 0F9Bh ;# ">
"2500
[; <" PIE1 equ 0F9Dh ;# ">
"2577
[; <" PIR1 equ 0F9Eh ;# ">
"2654
[; <" IPR1 equ 0F9Fh ;# ">
"2731
[; <" PIE2 equ 0FA0h ;# ">
"2797
[; <" PIR2 equ 0FA1h ;# ">
"2863
[; <" IPR2 equ 0FA2h ;# ">
"2929
[; <" EECON1 equ 0FA6h ;# ">
"2995
[; <" EECON2 equ 0FA7h ;# ">
"3002
[; <" EEDATA equ 0FA8h ;# ">
"3009
[; <" EEADR equ 0FA9h ;# ">
"3016
[; <" EEADRH equ 0FAAh ;# ">
"3023
[; <" RCSTA equ 0FABh ;# ">
"3028
[; <" RCSTA1 equ 0FABh ;# ">
"3233
[; <" TXSTA equ 0FACh ;# ">
"3238
[; <" TXSTA1 equ 0FACh ;# ">
"3489
[; <" TXREG equ 0FADh ;# ">
"3494
[; <" TXREG1 equ 0FADh ;# ">
"3501
[; <" RCREG equ 0FAEh ;# ">
"3506
[; <" RCREG1 equ 0FAEh ;# ">
"3513
[; <" SPBRG equ 0FAFh ;# ">
"3518
[; <" SPBRG1 equ 0FAFh ;# ">
"3525
[; <" SPBRGH equ 0FB0h ;# ">
"3532
[; <" T3CON equ 0FB1h ;# ">
"3644
[; <" TMR3 equ 0FB2h ;# ">
"3651
[; <" TMR3L equ 0FB2h ;# ">
"3658
[; <" TMR3H equ 0FB3h ;# ">
"3665
[; <" CMCON equ 0FB4h ;# ">
"3755
[; <" CVRCON equ 0FB5h ;# ">
"3834
[; <" ECCP1AS equ 0FB6h ;# ">
"3916
[; <" PWM1CON equ 0FB7h ;# ">
"3986
[; <" BAUDCON equ 0FB8h ;# ">
"3991
[; <" BAUDCTL equ 0FB8h ;# ">
"4158
[; <" CCP2CON equ 0FBAh ;# ">
"4237
[; <" CCPR2 equ 0FBBh ;# ">
"4244
[; <" CCPR2L equ 0FBBh ;# ">
"4251
[; <" CCPR2H equ 0FBCh ;# ">
"4258
[; <" CCP1CON equ 0FBDh ;# ">
"4355
[; <" CCPR1 equ 0FBEh ;# ">
"4362
[; <" CCPR1L equ 0FBEh ;# ">
"4369
[; <" CCPR1H equ 0FBFh ;# ">
"4376
[; <" ADCON2 equ 0FC0h ;# ">
"4447
[; <" ADCON1 equ 0FC1h ;# ">
"4532
[; <" ADCON0 equ 0FC2h ;# ">
"4651
[; <" ADRES equ 0FC3h ;# ">
"4658
[; <" ADRESL equ 0FC3h ;# ">
"4665
[; <" ADRESH equ 0FC4h ;# ">
"4672
[; <" SSPCON2 equ 0FC5h ;# ">
"4734
[; <" SSPCON1 equ 0FC6h ;# ">
"4804
[; <" SSPSTAT equ 0FC7h ;# ">
"5025
[; <" SSPADD equ 0FC8h ;# ">
"5032
[; <" SSPBUF equ 0FC9h ;# ">
"5039
[; <" T2CON equ 0FCAh ;# ">
"5110
[; <" PR2 equ 0FCBh ;# ">
"5115
[; <" MEMCON equ 0FCBh ;# ">
"5220
[; <" TMR2 equ 0FCCh ;# ">
"5227
[; <" T1CON equ 0FCDh ;# ">
"5330
[; <" TMR1 equ 0FCEh ;# ">
"5337
[; <" TMR1L equ 0FCEh ;# ">
"5344
[; <" TMR1H equ 0FCFh ;# ">
"5351
[; <" RCON equ 0FD0h ;# ">
"5484
[; <" WDTCON equ 0FD1h ;# ">
"5512
[; <" HLVDCON equ 0FD2h ;# ">
"5517
[; <" LVDCON equ 0FD2h ;# ">
"5782
[; <" OSCCON equ 0FD3h ;# ">
"5859
[; <" T0CON equ 0FD5h ;# ">
"5936
[; <" TMR0 equ 0FD6h ;# ">
"5943
[; <" TMR0L equ 0FD6h ;# ">
"5950
[; <" TMR0H equ 0FD7h ;# ">
"5957
[; <" STATUS equ 0FD8h ;# ">
"6028
[; <" FSR2 equ 0FD9h ;# ">
"6035
[; <" FSR2L equ 0FD9h ;# ">
"6042
[; <" FSR2H equ 0FDAh ;# ">
"6049
[; <" PLUSW2 equ 0FDBh ;# ">
"6056
[; <" PREINC2 equ 0FDCh ;# ">
"6063
[; <" POSTDEC2 equ 0FDDh ;# ">
"6070
[; <" POSTINC2 equ 0FDEh ;# ">
"6077
[; <" INDF2 equ 0FDFh ;# ">
"6084
[; <" BSR equ 0FE0h ;# ">
"6091
[; <" FSR1 equ 0FE1h ;# ">
"6098
[; <" FSR1L equ 0FE1h ;# ">
"6105
[; <" FSR1H equ 0FE2h ;# ">
"6112
[; <" PLUSW1 equ 0FE3h ;# ">
"6119
[; <" PREINC1 equ 0FE4h ;# ">
"6126
[; <" POSTDEC1 equ 0FE5h ;# ">
"6133
[; <" POSTINC1 equ 0FE6h ;# ">
"6140
[; <" INDF1 equ 0FE7h ;# ">
"6147
[; <" WREG equ 0FE8h ;# ">
"6159
[; <" FSR0 equ 0FE9h ;# ">
"6166
[; <" FSR0L equ 0FE9h ;# ">
"6173
[; <" FSR0H equ 0FEAh ;# ">
"6180
[; <" PLUSW0 equ 0FEBh ;# ">
"6187
[; <" PREINC0 equ 0FECh ;# ">
"6194
[; <" POSTDEC0 equ 0FEDh ;# ">
"6201
[; <" POSTINC0 equ 0FEEh ;# ">
"6208
[; <" INDF0 equ 0FEFh ;# ">
"6215
[; <" INTCON3 equ 0FF0h ;# ">
"6307
[; <" INTCON2 equ 0FF1h ;# ">
"6377
[; <" INTCON equ 0FF2h ;# ">
"6494
[; <" PROD equ 0FF3h ;# ">
"6501
[; <" PRODL equ 0FF3h ;# ">
"6508
[; <" PRODH equ 0FF4h ;# ">
"6515
[; <" TABLAT equ 0FF5h ;# ">
"6524
[; <" TBLPTR equ 0FF6h ;# ">
"6531
[; <" TBLPTRL equ 0FF6h ;# ">
"6538
[; <" TBLPTRH equ 0FF7h ;# ">
"6545
[; <" TBLPTRU equ 0FF8h ;# ">
"6554
[; <" PCLAT equ 0FF9h ;# ">
"6561
[; <" PC equ 0FF9h ;# ">
"6568
[; <" PCL equ 0FF9h ;# ">
"6575
[; <" PCLATH equ 0FFAh ;# ">
"6582
[; <" PCLATU equ 0FFBh ;# ">
"6589
[; <" STKPTR equ 0FFCh ;# ">
"6695
[; <" TOS equ 0FFDh ;# ">
"6702
[; <" TOSL equ 0FFDh ;# ">
"6709
[; <" TOSH equ 0FFEh ;# ">
"6716
[; <" TOSU equ 0FFFh ;# ">
"13 MCAL_Layer/GPIO/HAL_GPIO.c
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 13: volatile uint8_t* port_reg[] = {&PORTA,&PORTB,&PORTC,&PORTD,&PORTE};
[v _port_reg `*Vuc ~T0 @X0 -> 5 `i e ]
[i _port_reg
:U ..
&U _PORTA
&U _PORTB
&U _PORTC
&U _PORTD
&U _PORTE
..
]
"15
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 15: volatile uint8_t* lat_reg[] = {&LATA,&LATB,&LATC,&LATD,&LATE};
[v _lat_reg `*Vuc ~T0 @X0 -> 5 `i e ]
[i _lat_reg
:U ..
&U _LATA
&U _LATB
&U _LATC
&U _LATD
&U _LATE
..
]
"17
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 17: volatile uint8_t* tris_reg[] = {&TRISA,&TRISB,&TRISC,&TRISD,&TRISE};
[v _tris_reg `*Vuc ~T0 @X0 -> 5 `i e ]
[i _tris_reg
:U ..
&U _TRISA
&U _TRISB
&U _TRISC
&U _TRISD
&U _TRISE
..
]
"26
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 26: Std_ReturnType gpio_pin_direction_intialize( const pinConfig_t* pinCon){
[v _gpio_pin_direction_intialize `(uc ~T0 @X0 1 ef1`*CS273 ]
{
[e :U _gpio_pin_direction_intialize ]
[v _pinCon `*CS273 ~T0 @X0 1 r1 ]
[f ]
"27
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 27:     Std_ReturnType ret = ((Std_ReturnType)0x01);
[v _ret `uc ~T0 @X0 1 a ]
[e = _ret -> -> 1 `i `uc ]
"28
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 28:     if(!(pinCon) || (pinCon->port > 4) || (pinCon->pinIndex > 7))
[e $ ! || || ! != _pinCon -> -> 0 `i `*CS273 > -> . *U _pinCon 0 `i -> 4 `i > -> . *U _pinCon 1 `i -> 7 `i 275  ]
"29
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 29:     {
{
"30
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 30:         ret = ((Std_ReturnType)0x00);
[e = _ret -> -> 0 `i `uc ]
"31
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 31:     }
}
[e $U 276  ]
"32
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 32:     else
[e :U 275 ]
"33
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 33:     {
{
"34
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 34:         switch (pinCon->direction){
[e $U 278  ]
{
"35
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 35:                 case output:
[e :U 279 ]
"36
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 36:                   (*tris_reg[pinCon->port] &= (~(((uint8_t)(1<<pinCon->pinIndex)))));
[e =& *U *U + &U _tris_reg * -> . *U _pinCon 0 `ux -> -> # *U &U _tris_reg `ui `ux -> ~ -> -> << -> 1 `i -> . *U _pinCon 1 `i `uc `i `uc ]
"37
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 37:                  break;
[e $U 277  ]
"38
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 38:                 case input:
[e :U 280 ]
"39
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 39:                   (*tris_reg[pinCon->port] |= ((uint8_t)(1<<pinCon->pinIndex)));
[e =| *U *U + &U _tris_reg * -> . *U _pinCon 0 `ux -> -> # *U &U _tris_reg `ui `ux -> -> << -> 1 `i -> . *U _pinCon 1 `i `uc `uc ]
"40
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 40:                 break;
[e $U 277  ]
"41
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 41:                 default: ret = ((Std_ReturnType)0x00);
[e :U 281 ]
[e = _ret -> -> 0 `i `uc ]
"42
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 42:           }
}
[e $U 277  ]
[e :U 278 ]
[e [\ -> . *U _pinCon 2 `i , $ . `E3387 0 279
 , $ . `E3387 1 280
 281 ]
[e :U 277 ]
"43
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 43:     }
}
[e :U 276 ]
"44
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 44:     return ret;
[e ) _ret ]
[e $UE 274  ]
"45
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 45: }
[e :UE 274 ]
}
"46
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 46: Std_ReturnType gpio_pin_get_direction(const pinConfig_t* pinCon ,direction_t* dir_status){
[v _gpio_pin_get_direction `(uc ~T0 @X0 1 ef2`*CS273`*E3387 ]
{
[e :U _gpio_pin_get_direction ]
[v _pinCon `*CS273 ~T0 @X0 1 r1 ]
[v _dir_status `*E3387 ~T0 @X0 1 r2 ]
[f ]
"47
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 47:     Std_ReturnType ret = ((Std_ReturnType)0x00);
[v _ret `uc ~T0 @X0 1 a ]
[e = _ret -> -> 0 `i `uc ]
"48
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 48:     if(!(pinCon) || !(dir_status)|| (pinCon->port > 4) || (pinCon->pinIndex > 7))
[e $ ! || || || ! != _pinCon -> -> 0 `i `*CS273 ! != _dir_status -> -> 0 `i `*E3387 > -> . *U _pinCon 0 `i -> 4 `i > -> . *U _pinCon 1 `i -> 7 `i 283  ]
"49
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 49:     {
{
"50
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 50:         ret = ((Std_ReturnType)0x01);
[e = _ret -> -> 1 `i `uc ]
"51
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 51:     }
}
[e $U 284  ]
"52
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 52:     else
[e :U 283 ]
"53
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 53:     {
{
"54
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 54:       *dir_status = ((*tris_reg[pinCon->port] >> pinCon->pinIndex) & (uint8_t)0x01);
[e = *U _dir_status -> & >> -> *U *U + &U _tris_reg * -> . *U _pinCon 0 `ux -> -> # *U &U _tris_reg `ui `ux `i -> . *U _pinCon 1 `i -> -> -> 1 `i `uc `i `E3387 ]
"55
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 55:     }
}
[e :U 284 ]
"56
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 56:     return ret;
[e ) _ret ]
[e $UE 282  ]
"57
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 57: }
[e :UE 282 ]
}
"58
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 58: Std_ReturnType gpio_pin_write_logic(const pinConfig_t* pinCon ,logic_t logic){
[v _gpio_pin_write_logic `(uc ~T0 @X0 1 ef2`*CS273`E3383 ]
{
[e :U _gpio_pin_write_logic ]
[v _pinCon `*CS273 ~T0 @X0 1 r1 ]
[v _logic `E3383 ~T0 @X0 1 r2 ]
[f ]
"59
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 59:     Std_ReturnType ret = ((Std_ReturnType)0x01);
[v _ret `uc ~T0 @X0 1 a ]
[e = _ret -> -> 1 `i `uc ]
"60
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 60:     if(!(pinCon) || (pinCon->port > 4) || (pinCon->pinIndex > 7))
[e $ ! || || ! != _pinCon -> -> 0 `i `*CS273 > -> . *U _pinCon 0 `i -> 4 `i > -> . *U _pinCon 1 `i -> 7 `i 286  ]
"61
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 61:     {
{
"62
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 62:         ret = ((Std_ReturnType)0x00);
[e = _ret -> -> 0 `i `uc ]
"63
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 63:     }
}
[e $U 287  ]
"64
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 64:     else
[e :U 286 ]
"65
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 65:     {
{
"66
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 66:         switch (logic){
[e $U 289  ]
{
"67
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 67:           case low:
[e :U 290 ]
"68
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 68:             (*lat_reg[pinCon->port] &= (~(((uint8_t)(1<<pinCon->pinIndex)))));
[e =& *U *U + &U _lat_reg * -> . *U _pinCon 0 `ux -> -> # *U &U _lat_reg `ui `ux -> ~ -> -> << -> 1 `i -> . *U _pinCon 1 `i `uc `i `uc ]
"69
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 69:             break;
[e $U 288  ]
"70
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 70:           case high:
[e :U 291 ]
"71
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 71:             (*lat_reg[pinCon->port] |= ((uint8_t)(1<<pinCon->pinIndex)));
[e =| *U *U + &U _lat_reg * -> . *U _pinCon 0 `ux -> -> # *U &U _lat_reg `ui `ux -> -> << -> 1 `i -> . *U _pinCon 1 `i `uc `uc ]
"72
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 72:             break;
[e $U 288  ]
"73
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 73:           default: ret = ((Std_ReturnType)0x00);
[e :U 292 ]
[e = _ret -> -> 0 `i `uc ]
"74
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 74:           }
}
[e $U 288  ]
[e :U 289 ]
[e [\ -> _logic `ui , $ -> . `E3383 0 `ui 290
 , $ -> . `E3383 1 `ui 291
 292 ]
[e :U 288 ]
"75
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 75:     }
}
[e :U 287 ]
"76
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 76:     return ret;
[e ) _ret ]
[e $UE 285  ]
"77
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 77: }
[e :UE 285 ]
}
"78
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 78: Std_ReturnType gpio_pin_read_logic(const pinConfig_t* pinCon ,logic_t* ret_logic){
[v _gpio_pin_read_logic `(uc ~T0 @X0 1 ef2`*CS273`*E3383 ]
{
[e :U _gpio_pin_read_logic ]
[v _pinCon `*CS273 ~T0 @X0 1 r1 ]
[v _ret_logic `*E3383 ~T0 @X0 1 r2 ]
[f ]
"79
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 79:     Std_ReturnType ret = ((Std_ReturnType)0x00);
[v _ret `uc ~T0 @X0 1 a ]
[e = _ret -> -> 0 `i `uc ]
"80
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 80:     if(!(pinCon) || !(ret_logic) || (pinCon->port > 4) || ( pinCon->pinIndex > 7))
[e $ ! || || || ! != _pinCon -> -> 0 `i `*CS273 ! != _ret_logic -> -> 0 `i `*E3383 > -> . *U _pinCon 0 `i -> 4 `i > -> . *U _pinCon 1 `i -> 7 `i 294  ]
"81
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 81:     {
{
"82
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 82:         ret = ((Std_ReturnType)0x01);
[e = _ret -> -> 1 `i `uc ]
"83
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 83:     }
}
[e $U 295  ]
"84
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 84:     else
[e :U 294 ]
"85
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 85:     {
{
"86
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 86:         *ret_logic = ((*port_reg[pinCon->port] >> pinCon->pinIndex) & (uint8_t)0x01);
[e = *U _ret_logic -> & >> -> *U *U + &U _port_reg * -> . *U _pinCon 0 `ux -> -> # *U &U _port_reg `ui `ux `i -> . *U _pinCon 1 `i -> -> -> 1 `i `uc `i `E3383 ]
"87
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 87:     }
}
[e :U 295 ]
"88
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 88:     return ret;
[e ) _ret ]
[e $UE 293  ]
"89
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 89: }
[e :UE 293 ]
}
"90
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 90: Std_ReturnType gpio_pin_toggle_logic( pinConfig_t* pinCon){
[v _gpio_pin_toggle_logic `(uc ~T0 @X0 1 ef1`*S273 ]
{
[e :U _gpio_pin_toggle_logic ]
[v _pinCon `*S273 ~T0 @X0 1 r1 ]
[f ]
"91
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 91:     Std_ReturnType ret = ((Std_ReturnType)0x00);
[v _ret `uc ~T0 @X0 1 a ]
[e = _ret -> -> 0 `i `uc ]
"92
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 92:     if(!(pinCon) || (pinCon->port > 4 ) || pinCon->pinIndex > 7)
[e $ ! || || ! != _pinCon -> -> 0 `i `*S273 > -> . *U _pinCon 0 `i -> 4 `i > -> . *U _pinCon 1 `i -> 7 `i 297  ]
"93
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 93:     {
{
"94
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 94:         ret = ((Std_ReturnType)0x01);
[e = _ret -> -> 1 `i `uc ]
"95
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 95:     }
}
[e $U 298  ]
"96
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 96:     else
[e :U 297 ]
"97
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 97:     {
{
"98
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 98:         (*lat_reg[pinCon->port] ^= (((uint8_t)(1<<pinCon->pinIndex))));
[e =^ *U *U + &U _lat_reg * -> . *U _pinCon 0 `ux -> -> # *U &U _lat_reg `ui `ux -> -> << -> 1 `i -> . *U _pinCon 1 `i `uc `uc ]
"99
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 99:     }
}
[e :U 298 ]
"100
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 100:     return ret;
[e ) _ret ]
[e $UE 296  ]
"101
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 101: }
[e :UE 296 ]
}
"103
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 103: Std_ReturnType gpio_pin_intialize( const pinConfig_t* pinCon)
[v _gpio_pin_intialize `(uc ~T0 @X0 1 ef1`*CS273 ]
"104
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 104: {
{
[e :U _gpio_pin_intialize ]
"103
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 103: Std_ReturnType gpio_pin_intialize( const pinConfig_t* pinCon)
[v _pinCon `*CS273 ~T0 @X0 1 r1 ]
"104
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 104: {
[f ]
"105
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 105:   Std_ReturnType ret = ((Std_ReturnType)0x01);
[v _ret `uc ~T0 @X0 1 a ]
[e = _ret -> -> 1 `i `uc ]
"106
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 106:   if(!(pinCon) || pinCon->port > 4 || pinCon->pinIndex > 7)
[e $ ! || || ! != _pinCon -> -> 0 `i `*CS273 > -> . *U _pinCon 0 `i -> 4 `i > -> . *U _pinCon 1 `i -> 7 `i 300  ]
"107
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 107:     {
{
"108
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 108:       ret = ((Std_ReturnType)0x00);
[e = _ret -> -> 0 `i `uc ]
"109
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 109:     }
}
[e $U 301  ]
"110
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 110:   else
[e :U 300 ]
"111
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 111:     {
{
"112
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 112:       ret = gpio_pin_direction_intialize (pinCon);
[e = _ret ( _gpio_pin_direction_intialize (1 _pinCon ]
"113
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 113:       ret = gpio_pin_write_logic (pinCon , pinCon->logic);
[e = _ret ( _gpio_pin_write_logic (2 , _pinCon -> . *U _pinCon 3 `E3383 ]
"114
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 114:     }
}
[e :U 301 ]
"115
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 115:   return ret;
[e ) _ret ]
[e $UE 299  ]
"116
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 116: }
[e :UE 299 ]
}
"118
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 118: Std_ReturnType gpio_port_direction_intialize( const PortIndex_t port , uint8_t dir){
[v _gpio_port_direction_intialize `(uc ~T0 @X0 1 ef2`CE3401`uc ]
{
[e :U _gpio_port_direction_intialize ]
[v _port `CE3401 ~T0 @X0 1 r1 ]
[v _dir `uc ~T0 @X0 1 r2 ]
[f ]
"119
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 119:   Std_ReturnType ret = ((Std_ReturnType)0x01);
[v _ret `uc ~T0 @X0 1 a ]
[e = _ret -> -> 1 `i `uc ]
"120
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 120:   if(port> 4)
[e $ ! > -> _port `ui -> -> 4 `i `ui 303  ]
"121
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 121:     {
{
"122
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 122:       ret = ((Std_ReturnType)0x00);
[e = _ret -> -> 0 `i `uc ]
"123
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 123:     }
}
[e $U 304  ]
"124
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 124:   else
[e :U 303 ]
"125
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 125:       *tris_reg[port] = dir;
[e = *U *U + &U _tris_reg * -> _port `ux -> -> # *U &U _tris_reg `ui `ux _dir ]
[e :U 304 ]
"126
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 126:   return ret;
[e ) _ret ]
[e $UE 302  ]
"127
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 127: }
[e :UE 302 ]
}
"128
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 128: Std_ReturnType gpio_port_get_direction_stat(const PortIndex_t port , uint8_t* dir_status){
[v _gpio_port_get_direction_stat `(uc ~T0 @X0 1 ef2`CE3401`*uc ]
{
[e :U _gpio_port_get_direction_stat ]
[v _port `CE3401 ~T0 @X0 1 r1 ]
[v _dir_status `*uc ~T0 @X0 1 r2 ]
[f ]
"129
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 129:     Std_ReturnType ret = ((Std_ReturnType)0x01);
[v _ret `uc ~T0 @X0 1 a ]
[e = _ret -> -> 1 `i `uc ]
"130
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 130:     if(port > 4)
[e $ ! > -> _port `ui -> -> 4 `i `ui 306  ]
"131
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 131:       {
{
"132
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 132:         ret = ((Std_ReturnType)0x00);
[e = _ret -> -> 0 `i `uc ]
"133
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 133:       }
}
[e $U 307  ]
"134
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 134:     else
[e :U 306 ]
"135
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 135:         *dir_status = *tris_reg[port];
[e = *U _dir_status *U *U + &U _tris_reg * -> _port `ux -> -> # *U &U _tris_reg `ui `ux ]
[e :U 307 ]
"137
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 137:     return ret;
[e ) _ret ]
[e $UE 305  ]
"139
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 139: }
[e :UE 305 ]
}
"140
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 140: Std_ReturnType gpio_port_write_logic(const PortIndex_t port ,uint8_t logic){
[v _gpio_port_write_logic `(uc ~T0 @X0 1 ef2`CE3401`uc ]
{
[e :U _gpio_port_write_logic ]
[v _port `CE3401 ~T0 @X0 1 r1 ]
[v _logic `uc ~T0 @X0 1 r2 ]
[f ]
"141
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 141:     Std_ReturnType ret = ((Std_ReturnType)0x01);
[v _ret `uc ~T0 @X0 1 a ]
[e = _ret -> -> 1 `i `uc ]
"142
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 142:     if(port > 4)
[e $ ! > -> _port `ui -> -> 4 `i `ui 309  ]
"143
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 143:       ret = ((Std_ReturnType)0x00);
[e = _ret -> -> 0 `i `uc ]
[e $U 310  ]
"144
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 144:     else
[e :U 309 ]
"145
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 145:       *lat_reg[port] = logic;
[e = *U *U + &U _lat_reg * -> _port `ux -> -> # *U &U _lat_reg `ui `ux _logic ]
[e :U 310 ]
"146
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 146:     return ret;
[e ) _ret ]
[e $UE 308  ]
"147
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 147: }
[e :UE 308 ]
}
"148
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 148: Std_ReturnType gpio_port_read_logic(const PortIndex_t port ,uint8_t *ret_logic){
[v _gpio_port_read_logic `(uc ~T0 @X0 1 ef2`CE3401`*uc ]
{
[e :U _gpio_port_read_logic ]
[v _port `CE3401 ~T0 @X0 1 r1 ]
[v _ret_logic `*uc ~T0 @X0 1 r2 ]
[f ]
"149
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 149:     Std_ReturnType ret = ((Std_ReturnType)0x01);
[v _ret `uc ~T0 @X0 1 a ]
[e = _ret -> -> 1 `i `uc ]
"150
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 150:     if(port > 4 || !(ret_logic))
[e $ ! || > -> _port `ui -> -> 4 `i `ui ! != _ret_logic -> -> 0 `i `*uc 312  ]
"151
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 151:       ret = ((Std_ReturnType)0x00);
[e = _ret -> -> 0 `i `uc ]
[e $U 313  ]
"152
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 152:     else
[e :U 312 ]
"153
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 153:       *ret_logic = *lat_reg[port];
[e = *U _ret_logic *U *U + &U _lat_reg * -> _port `ux -> -> # *U &U _lat_reg `ui `ux ]
[e :U 313 ]
"154
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 154:     return ret;
[e ) _ret ]
[e $UE 311  ]
"155
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 155: }
[e :UE 311 ]
}
"156
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 156: Std_ReturnType gpio_port_toggle_logic(const PortIndex_t port){
[v _gpio_port_toggle_logic `(uc ~T0 @X0 1 ef1`CE3401 ]
{
[e :U _gpio_port_toggle_logic ]
[v _port `CE3401 ~T0 @X0 1 r1 ]
[f ]
"157
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 157:     Std_ReturnType ret = ((Std_ReturnType)0x01);
[v _ret `uc ~T0 @X0 1 a ]
[e = _ret -> -> 1 `i `uc ]
"158
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 158:     if(port > 4)
[e $ ! > -> _port `ui -> -> 4 `i `ui 315  ]
"159
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 159:       ret = ((Std_ReturnType)0x00);
[e = _ret -> -> 0 `i `uc ]
[e $U 316  ]
"160
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 160:     else
[e :U 315 ]
"161
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 161:       (*lat_reg[port] = ~*lat_reg[port]);
[e = *U *U + &U _lat_reg * -> _port `ux -> -> # *U &U _lat_reg `ui `ux -> ~ -> *U *U + &U _lat_reg * -> _port `ux -> -> # *U &U _lat_reg `ui `ux `i `uc ]
[e :U 316 ]
"162
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 162:     return ret;
[e ) _ret ]
[e $UE 314  ]
"163
[; ;MCAL_Layer/GPIO/HAL_GPIO.c: 163: }
[e :UE 314 ]
}
